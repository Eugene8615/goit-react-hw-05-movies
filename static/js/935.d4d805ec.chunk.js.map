{"version":3,"file":"static/js/935.d4d805ec.chunk.js","mappings":"6SACaA,EAAc,mCAAG,2FAG7BC,EAAAA,EAAAA,SAAAA,QAAyB,kDAHI,4CAOJA,EAAAA,EAAAA,IAAU,GAAI,CAChCC,OAAQ,CACJC,QATkB,oDAOtBC,EAPsB,yBAcnBA,GAdmB,2CAAH,qDAoBdC,EAAc,mCAAG,WAAOC,GAAP,8EAG7BL,EAAAA,EAAAA,SAAAA,QAAyB,sCAHI,4CAOJA,EAAAA,EAAAA,IAAA,UAAaK,GAAM,CACrCJ,OAAQ,CACNC,QAToB,oDAOtBC,EAPsB,yBAenBA,GAfmB,2CAAH,sDAmBdG,EAAS,mCAAG,WAAOD,GAAP,8EACzBL,EAAAA,EAAAA,SAAAA,QAAyB,sCADA,4CAKCA,EAAAA,EAAAA,IAAA,UAAaK,EAAb,YAA2B,CAC7CJ,OAAQ,CACNC,QAPe,oDAKjBC,EALiB,yBAadA,GAbc,2CAAH,sDAiBTI,EAAgB,mCAAG,WAAOF,GAAP,8EAChCL,EAAAA,EAAAA,SAAAA,QAAyB,sCADO,4CAKNA,EAAAA,EAAAA,IAAA,UAAaK,EAAb,YAA2B,CAC7CJ,OAAQ,CACNC,QAPsB,oDAKxBC,EALwB,yBAarBA,GAbqB,2CAAH,sDAiBhBK,EAAiB,mCAAG,WAAOC,GAAP,8EAE7BT,EAAAA,EAAAA,SAAAA,QAAyB,4CAFI,4CAMPA,EAAAA,EAAAA,IAAA,GAAc,CAChCC,OAAQ,CACNC,QARuB,mCASvBQ,SAAU,QACVD,MAAAA,EACAE,KAAM,EACNC,eAAe,KAZQ,cAMzBT,EANyB,yBAmBtBA,GAnBsB,2CAAH,qD,sKCxEjBU,EAAOC,EAAAA,EAAAA,GAAH,yDAKJC,EAAQD,EAAAA,EAAAA,GAAH,uNAULE,EAAMF,EAAAA,EAAAA,IAAH,qD,SC6BhB,EArCa,WAIT,OAA4BG,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAsBR,OAlBAE,EAAAA,EAAAA,YAAU,WACT,IAAMC,EAAU,mCAAG,8GAGWjB,EAAAA,EAAAA,GAAUc,GAHrB,OAGNjB,EAHM,OAKZgB,EAAUhB,EAASqB,KAAKC,MALZ,gDAOZC,QAAQC,IAAR,MAPY,iEAAH,qDAYbJ,GAEH,GAAE,CAACH,KAGI,+BACJ,SAACP,EAAD,UAAOK,EAAOU,KAAI,SAACC,GAEf,IAAMC,EAAK,0CAAsCD,EAAME,cAEvD,OAAO,UAAChB,EAAD,YAAsB,SAACC,EAAD,CAAKgB,IAA4B,OAAvBH,EAAME,aAAwBD,EAAQG,EAAWC,IAAI,MAAI,uBAAIL,EAAMM,SAAvFN,EAAMxB,GAAmG,OAGvI,C","sources":["Api/Api.js","components/Cast/Cast.styles.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import axios from \"axios\";\nexport const fetchTrendings = async () => { \n    \n\n axios.defaults.baseURL = 'https://api.themoviedb.org/3/trending/movie/day';\n    const KEY = `9974480522bc7822e6ea6c551c75459b`;\n\n\n  const response = await  axios.get('', {\n        params: {\n            api_key: KEY,\n        },\n    });  \n\n    \n    return response;\n\n};\n\n\n\nexport const fetchMovieById = async (id) => { \n    \n\n axios.defaults.baseURL = 'https://api.themoviedb.org/3/movie/';\n    const KEY = `9974480522bc7822e6ea6c551c75459b`;\n\n\n  const response = await  axios.get(`${id}`, {\n        params: {\n          api_key: KEY,\n            \n        },\n    });  \n\n    \n    return response;\n\n};\n\nexport const fetchCast = async (id) => { \naxios.defaults.baseURL = 'https://api.themoviedb.org/3/movie/';\n    const KEY = `9974480522bc7822e6ea6c551c75459b`;\n\n\n  const response = await  axios.get(`${id}/credits`, {\n        params: {\n          api_key: KEY,\n            \n        },\n    });  \n\n    \n    return response;\n\n};\n\nexport const fetchReviewsById = async (id) => { \naxios.defaults.baseURL = 'https://api.themoviedb.org/3/movie/';\n    const KEY = `9974480522bc7822e6ea6c551c75459b`;\n\n\n  const response = await  axios.get(`${id}/reviews`, {\n        params: {\n          api_key: KEY,\n            \n        },\n    });  \n\n    \n    return response;\n\n};\n\nexport const fetchMovieByQuery = async (query) => {\n  \n    axios.defaults.baseURL = 'https://api.themoviedb.org/3/search/movie';\n    const KEY = `9974480522bc7822e6ea6c551c75459b`;\n\n\n  const response = await  axios.get(``, {\n        params: {\n          api_key: KEY,\n          language: \"en-US\",\n          query,\n          page: 1,\n          include_adult: true,\n          \n            \n        },\n    });  \n\n    \n    return response;\n    \n};","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\ntext-align: center;\npadding:0;\n`\n\nexport const Actor = styled.li`\n    list-style-type:none;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);\n    display: inline-block;\n  margin: 10px;\n  text-align: center;\n  background-color:#FFA559;\n  border-radius:5px\n`;\n\nexport const Img = styled.img`\nborder-radius: 5px 5px 0 0;\n`","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCast } from \"Api/Api\";\nimport fallback from \"../../imgs/not found.png\"\nimport { Actor } from \"./Cast.styles\"\nimport { List } from \"./Cast.styles\"\nimport { Img } from \"./Cast.styles\"\n\n\nconst Cast = () => { \n\n    \n\n    const [actors, setActors] = useState([]);\n    const { movieId } = useParams();\n    \n\n\n    useEffect(() => {\n     const fetchActor = async () => {\n        \n        try {\n            const response = await fetchCast(movieId);\n        \n            setActors(response.data.cast);\n        } catch (error) {\n            console.log(error);\n         };\n\n    };\n\n        fetchActor();\n\n    }, [movieId]);\n\n   \n    return (<>\n        <List>{actors.map((actor) => {\n            \n            const image = `https://image.tmdb.org/t/p/w300/${actor.profile_path}`\n           \n            return <Actor key={actor.id}><Img src={actor.profile_path !== null ? image : fallback } alt=\"\"/><p>{actor.name}</p></Actor>} )}</List>\n    \n    </>);\n};\n\nexport default Cast;"],"names":["fetchTrendings","axios","params","api_key","response","fetchMovieById","id","fetchCast","fetchReviewsById","fetchMovieByQuery","query","language","page","include_adult","List","styled","Actor","Img","useState","actors","setActors","movieId","useParams","useEffect","fetchActor","data","cast","console","log","map","actor","image","profile_path","src","fallback","alt","name"],"sourceRoot":""}